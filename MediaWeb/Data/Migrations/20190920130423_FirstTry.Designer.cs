// <auto-generated />
using System;
using MediaWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MediaWeb.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190920130423_FirstTry")]
    partial class FirstTry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MediaWeb.Domain.Film.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Beschrijving");

                    b.Property<byte[]>("Foto");

                    b.Property<int>("Lengte");

                    b.Property<string>("Titel");

                    b.Property<bool>("Zichtbaar");

                    b.HasKey("Id");

                    b.ToTable("Film");
                });

            modelBuilder.Entity("MediaWeb.Domain.Film.FilmGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Genre");

                    b.HasKey("Id");

                    b.ToTable("FilmGenre");
                });

            modelBuilder.Entity("MediaWeb.Domain.Film.FilmPlaylist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Titel");

                    b.HasKey("Id");

                    b.ToTable("FilmPlaylist");
                });

            modelBuilder.Entity("MediaWeb.Domain.Film.FilmRatingReview", b =>
                {
                    b.Property<int>("FilmId");

                    b.Property<string>("UserId");

                    b.Property<int>("Rating");

                    b.Property<string>("Review");

                    b.HasKey("FilmId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FilmRatingReview");
                });

            modelBuilder.Entity("MediaWeb.Domain.Film.FilmRegisseur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Naam");

                    b.HasKey("Id");

                    b.ToTable("FilmRegisseur");
                });

            modelBuilder.Entity("MediaWeb.Domain.Film.GenreFilm", b =>
                {
                    b.Property<int>("FilmId");

                    b.Property<int>("GenreId");

                    b.HasKey("FilmId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GenreFilm");
                });

            modelBuilder.Entity("MediaWeb.Domain.Film.RegisseurFilm", b =>
                {
                    b.Property<int>("FilmId");

                    b.Property<int>("RegisseurId");

                    b.HasKey("FilmId", "RegisseurId");

                    b.HasIndex("RegisseurId");

                    b.ToTable("RegisseurFilm");
                });

            modelBuilder.Entity("MediaWeb.Domain.Film.UserFilmFavourite", b =>
                {
                    b.Property<int>("FilmId");

                    b.Property<string>("UserId");

                    b.HasKey("FilmId", "UserId");

                    b.ToTable("UserFilmFavourite");
                });

            modelBuilder.Entity("MediaWeb.Domain.Film.UserFilmPlaylist", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("PlaylistId");

                    b.Property<int>("FilmId");

                    b.HasKey("UserId", "PlaylistId", "FilmId");

                    b.HasIndex("FilmId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("UserFilmPlaylist");
                });

            modelBuilder.Entity("MediaWeb.Domain.Muziek.GenreMuziek", b =>
                {
                    b.Property<int>("GenreId");

                    b.Property<int>("MuziekId");

                    b.Property<int?>("NummerId");

                    b.HasKey("GenreId", "MuziekId");

                    b.HasIndex("NummerId");

                    b.ToTable("GenreMuziek");
                });

            modelBuilder.Entity("MediaWeb.Domain.Muziek.MuziekAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Titel");

                    b.HasKey("Id");

                    b.ToTable("MuziekAlbum");
                });

            modelBuilder.Entity("MediaWeb.Domain.Muziek.MuziekArtiest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naam");

                    b.HasKey("Id");

                    b.ToTable("MuziekArtiest");
                });

            modelBuilder.Entity("MediaWeb.Domain.Muziek.MuziekGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Genre");

                    b.HasKey("Id");

                    b.ToTable("MuziekGenre");
                });

            modelBuilder.Entity("MediaWeb.Domain.Muziek.MuziekPlaylist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Titel");

                    b.HasKey("Id");

                    b.ToTable("MuziekPlaylist");
                });

            modelBuilder.Entity("MediaWeb.Domain.Muziek.MuziekRatingReview", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("MuziekId");

                    b.Property<int?>("NummerId");

                    b.Property<int>("Rating");

                    b.Property<string>("Review");

                    b.HasKey("UserId", "MuziekId");

                    b.HasIndex("NummerId");

                    b.ToTable("MuziekRatingReview");
                });

            modelBuilder.Entity("MediaWeb.Domain.Muziek.Nummer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("AlbumArt");

                    b.Property<int>("AlbumId");

                    b.Property<int>("ArtiestId");

                    b.Property<int>("Lengte");

                    b.Property<string>("Titel");

                    b.Property<bool>("Zichtbaar");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtiestId");

                    b.ToTable("Nummer");
                });

            modelBuilder.Entity("MediaWeb.Domain.Muziek.UserMuziekFavourite", b =>
                {
                    b.Property<int>("MuziekId");

                    b.Property<string>("UserId");

                    b.Property<int?>("NummerId");

                    b.HasKey("MuziekId", "UserId");

                    b.HasIndex("NummerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMuziekFavourite");
                });

            modelBuilder.Entity("MediaWeb.Domain.Muziek.UserMuziekPlaylist", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("PlaylistId");

                    b.Property<int>("MuziekId");

                    b.Property<int?>("NummerId");

                    b.HasKey("UserId", "PlaylistId", "MuziekId");

                    b.HasIndex("NummerId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("UserMuziekPlaylist");
                });

            modelBuilder.Entity("MediaWeb.Domain.Podcast.GenrePodcast", b =>
                {
                    b.Property<int>("GenreId");

                    b.Property<int>("PodcastId");

                    b.HasKey("GenreId", "PodcastId");

                    b.HasIndex("PodcastId");

                    b.ToTable("GenrePodcast");
                });

            modelBuilder.Entity("MediaWeb.Domain.Podcast.Podcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Auteur");

                    b.Property<string>("Titel");

                    b.Property<bool>("Zichtbaar");

                    b.HasKey("Id");

                    b.ToTable("Podcast");
                });

            modelBuilder.Entity("MediaWeb.Domain.Podcast.PodcastEpisode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Lengte");

                    b.Property<int>("PodcastId");

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("Titel");

                    b.HasKey("Id");

                    b.HasIndex("PodcastId");

                    b.ToTable("PodcastEpisode");
                });

            modelBuilder.Entity("MediaWeb.Domain.Podcast.PodcastGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Genre");

                    b.Property<int?>("PodcastId");

                    b.HasKey("Id");

                    b.HasIndex("PodcastId");

                    b.ToTable("PodcastGenre");
                });

            modelBuilder.Entity("MediaWeb.Domain.Podcast.PodcastPlaylist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Titel");

                    b.HasKey("Id");

                    b.ToTable("PodcastPlaylist");
                });

            modelBuilder.Entity("MediaWeb.Domain.Podcast.PodcastRatingReview", b =>
                {
                    b.Property<int>("PodcastEpisodeId");

                    b.Property<string>("UserId");

                    b.Property<int>("Rating");

                    b.Property<string>("Review");

                    b.HasKey("PodcastEpisodeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PodcastRatingReview");
                });

            modelBuilder.Entity("MediaWeb.Domain.Podcast.UserPodcastFavourite", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("PodcastEpisodeId");

                    b.HasKey("UserId", "PodcastEpisodeId");

                    b.HasIndex("PodcastEpisodeId");

                    b.ToTable("UserPodcastFavourite");
                });

            modelBuilder.Entity("MediaWeb.Domain.Podcast.UserPodcastPlaylist", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("PlaylistId");

                    b.Property<int>("PodcastEpisodeId");

                    b.HasKey("UserId", "PlaylistId", "PodcastEpisodeId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("PodcastEpisodeId");

                    b.ToTable("UserPodcastPlaylist");
                });

            modelBuilder.Entity("MediaWeb.Domain.Serie.GenreSerie", b =>
                {
                    b.Property<int>("GenreId");

                    b.Property<int>("SerieId");

                    b.HasKey("GenreId", "SerieId");

                    b.HasIndex("SerieId");

                    b.ToTable("GenreSerie");
                });

            modelBuilder.Entity("MediaWeb.Domain.Serie.Serie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Titel");

                    b.Property<bool>("Zichtbaar");

                    b.HasKey("Id");

                    b.ToTable("Serie");
                });

            modelBuilder.Entity("MediaWeb.Domain.Serie.SerieEpisode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Lengte");

                    b.Property<int>("SerieId");

                    b.Property<string>("Titel");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.ToTable("SerieEpisode");
                });

            modelBuilder.Entity("MediaWeb.Domain.Serie.SerieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Genre");

                    b.HasKey("Id");

                    b.ToTable("SerieGenre");
                });

            modelBuilder.Entity("MediaWeb.Domain.Serie.SeriePlaylist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Titel");

                    b.HasKey("Id");

                    b.ToTable("SeriePlaylist");
                });

            modelBuilder.Entity("MediaWeb.Domain.Serie.SerieRatingReview", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("SerieEpisodeId");

                    b.Property<int>("Rating");

                    b.Property<string>("Review");

                    b.HasKey("UserId", "SerieEpisodeId");

                    b.HasIndex("SerieEpisodeId");

                    b.ToTable("SerieRatingReview");
                });

            modelBuilder.Entity("MediaWeb.Domain.Serie.UserSerieFavourite", b =>
                {
                    b.Property<int>("SerieEpisodeId");

                    b.Property<string>("UserId");

                    b.HasKey("SerieEpisodeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSerieFavourite");
                });

            modelBuilder.Entity("MediaWeb.Domain.Serie.UserSeriePlaylist", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("SerieEpisodeId");

                    b.Property<int>("PlaylistId");

                    b.HasKey("UserId", "SerieEpisodeId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SerieEpisodeId");

                    b.ToTable("UserSeriePlaylist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MediaWeb.Domain.Film.FilmRatingReview", b =>
                {
                    b.HasOne("MediaWeb.Domain.Film.Film", "Film")
                        .WithMany("RatingReviews")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Film.GenreFilm", b =>
                {
                    b.HasOne("MediaWeb.Domain.Film.Film", "Film")
                        .WithMany("Genres")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediaWeb.Domain.Film.FilmGenre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Film.RegisseurFilm", b =>
                {
                    b.HasOne("MediaWeb.Domain.Film.Film", "Film")
                        .WithMany("Regisseurs")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediaWeb.Domain.Film.FilmRegisseur", "Regisseur")
                        .WithMany()
                        .HasForeignKey("RegisseurId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Film.UserFilmFavourite", b =>
                {
                    b.HasOne("MediaWeb.Domain.Film.Film")
                        .WithMany("Favourites")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Film.UserFilmPlaylist", b =>
                {
                    b.HasOne("MediaWeb.Domain.Film.Film", "Film")
                        .WithMany("Playlists")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediaWeb.Domain.Film.FilmPlaylist", "Playlist")
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Muziek.GenreMuziek", b =>
                {
                    b.HasOne("MediaWeb.Domain.Muziek.MuziekGenre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediaWeb.Domain.Muziek.Nummer", "Nummer")
                        .WithMany("Genres")
                        .HasForeignKey("NummerId");
                });

            modelBuilder.Entity("MediaWeb.Domain.Muziek.MuziekRatingReview", b =>
                {
                    b.HasOne("MediaWeb.Domain.Muziek.Nummer", "Nummer")
                        .WithMany("RatingReviews")
                        .HasForeignKey("NummerId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Muziek.Nummer", b =>
                {
                    b.HasOne("MediaWeb.Domain.Muziek.MuziekAlbum", "Album")
                        .WithMany("Nummer")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediaWeb.Domain.Muziek.MuziekArtiest", "Artiest")
                        .WithMany("Nummer")
                        .HasForeignKey("ArtiestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Muziek.UserMuziekFavourite", b =>
                {
                    b.HasOne("MediaWeb.Domain.Muziek.Nummer", "Nummer")
                        .WithMany("Favourites")
                        .HasForeignKey("NummerId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Muziek.UserMuziekPlaylist", b =>
                {
                    b.HasOne("MediaWeb.Domain.Muziek.Nummer", "Nummer")
                        .WithMany("Playlists")
                        .HasForeignKey("NummerId");

                    b.HasOne("MediaWeb.Domain.Muziek.MuziekPlaylist", "Playlist")
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Podcast.GenrePodcast", b =>
                {
                    b.HasOne("MediaWeb.Domain.Podcast.PodcastGenre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediaWeb.Domain.Podcast.Podcast", "Podcast")
                        .WithMany()
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Podcast.PodcastEpisode", b =>
                {
                    b.HasOne("MediaWeb.Domain.Podcast.Podcast", "Podcast")
                        .WithMany("Episodes")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Podcast.PodcastGenre", b =>
                {
                    b.HasOne("MediaWeb.Domain.Podcast.Podcast")
                        .WithMany("Genres")
                        .HasForeignKey("PodcastId");
                });

            modelBuilder.Entity("MediaWeb.Domain.Podcast.PodcastRatingReview", b =>
                {
                    b.HasOne("MediaWeb.Domain.Podcast.PodcastEpisode", "PodcastEpisode")
                        .WithMany("RatingReviews")
                        .HasForeignKey("PodcastEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Podcast.UserPodcastFavourite", b =>
                {
                    b.HasOne("MediaWeb.Domain.Podcast.PodcastEpisode", "PodcastEpisode")
                        .WithMany("Favourites")
                        .HasForeignKey("PodcastEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Podcast.UserPodcastPlaylist", b =>
                {
                    b.HasOne("MediaWeb.Domain.Podcast.PodcastPlaylist", "Playlist")
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediaWeb.Domain.Podcast.PodcastEpisode", "PodcastEpisode")
                        .WithMany("Playlists")
                        .HasForeignKey("PodcastEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Serie.GenreSerie", b =>
                {
                    b.HasOne("MediaWeb.Domain.Serie.SerieGenre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediaWeb.Domain.Serie.Serie", "Serie")
                        .WithMany("Genres")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Serie.SerieEpisode", b =>
                {
                    b.HasOne("MediaWeb.Domain.Serie.Serie", "Serie")
                        .WithMany("Episode")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Serie.SerieRatingReview", b =>
                {
                    b.HasOne("MediaWeb.Domain.Serie.SerieEpisode", "SerieEpisode")
                        .WithMany("RatingReviews")
                        .HasForeignKey("SerieEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Serie.UserSerieFavourite", b =>
                {
                    b.HasOne("MediaWeb.Domain.Serie.SerieEpisode", "SerieEpisode")
                        .WithMany("Favourites")
                        .HasForeignKey("SerieEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaWeb.Domain.Serie.UserSeriePlaylist", b =>
                {
                    b.HasOne("MediaWeb.Domain.Serie.SeriePlaylist", "Playlist")
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediaWeb.Domain.Serie.SerieEpisode", "SerieEpisode")
                        .WithMany("Playlist")
                        .HasForeignKey("SerieEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
